/*
 * Url Manager Service
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Urlmanager.ApiException;
import org.openapitools.client.model.RpcStatus;
import org.openapitools.client.model.UrlmanagerChangeUrlRewriteRequestPathRequest;
import org.openapitools.client.model.UrlmanagerCreateUrlRewriteRequest;
import org.openapitools.client.model.UrlmanagerDeleteUrlRewriteRequest;
import org.openapitools.client.model.UrlmanagerGetUrlRewriteRequest;
import org.openapitools.client.model.UrlmanagerListUrlRewritesByTargetPathsRequest;
import org.openapitools.client.model.UrlmanagerListUrlRewritesRequest;
import org.openapitools.client.model.UrlmanagerListUrlRewritesResponse;
import org.openapitools.client.model.UrlmanagerResolveUrlRewriteRequest;
import org.openapitools.client.model.UrlmanagerUrlRewrite;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BasicOperationsApi
 */
@Disabled
public class BasicOperationsApiTest {

    private final BasicOperationsApi api = new BasicOperationsApi();

    /**
     * Change Url Rewrite Request Path
     *
     * Modify the request path of a specific URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerChangeUrlRewriteRequestPathTest() throws ApiException {
        UrlmanagerChangeUrlRewriteRequestPathRequest body = null;
        Object response = api.urlManagerChangeUrlRewriteRequestPath(body);
        // TODO: test validations
    }

    /**
     * Change Url Rewrite Request Path
     *
     * Modify the request path of a specific URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerChangeUrlRewriteRequestPath2Test() throws ApiException {
        UrlmanagerChangeUrlRewriteRequestPathRequest body = null;
        Object response = api.urlManagerChangeUrlRewriteRequestPath2(body);
        // TODO: test validations
    }

    /**
     * Create Url Rewrite
     *
     * Create a new URL rewrite configuration with customizable rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerCreateUrlRewriteTest() throws ApiException {
        UrlmanagerCreateUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerCreateUrlRewrite(body);
        // TODO: test validations
    }

    /**
     * Create Url Rewrite
     *
     * Create a new URL rewrite configuration with customizable rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerCreateUrlRewrite2Test() throws ApiException {
        UrlmanagerCreateUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerCreateUrlRewrite2(body);
        // TODO: test validations
    }

    /**
     * Delete Url Rewrite
     *
     * Delete an existing URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerDeleteUrlRewriteTest() throws ApiException {
        UrlmanagerDeleteUrlRewriteRequest body = null;
        Object response = api.urlManagerDeleteUrlRewrite(body);
        // TODO: test validations
    }

    /**
     * Delete Url Rewrite
     *
     * Delete an existing URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerDeleteUrlRewrite2Test() throws ApiException {
        UrlmanagerDeleteUrlRewriteRequest body = null;
        Object response = api.urlManagerDeleteUrlRewrite2(body);
        // TODO: test validations
    }

    /**
     * Get Url Rewrite
     *
     * Retrieve the details of a specific URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerGetUrlRewriteTest() throws ApiException {
        UrlmanagerGetUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerGetUrlRewrite(body);
        // TODO: test validations
    }

    /**
     * Get Url Rewrite
     *
     * Retrieve the details of a specific URL rewrite configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerGetUrlRewrite2Test() throws ApiException {
        UrlmanagerGetUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerGetUrlRewrite2(body);
        // TODO: test validations
    }

    /**
     * List Url Rewrites
     *
     * Retrieve a list of all URL rewrite configurations in your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerListUrlRewritesTest() throws ApiException {
        UrlmanagerListUrlRewritesRequest body = null;
        UrlmanagerListUrlRewritesResponse response = api.urlManagerListUrlRewrites(body);
        // TODO: test validations
    }

    /**
     * List Url Rewrites
     *
     * Retrieve a list of all URL rewrite configurations in your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerListUrlRewrites2Test() throws ApiException {
        UrlmanagerListUrlRewritesRequest body = null;
        UrlmanagerListUrlRewritesResponse response = api.urlManagerListUrlRewrites2(body);
        // TODO: test validations
    }

    /**
     * List Url Rewrites By Target Paths
     *
     * Retrieve URL rewrite configurations based on target paths.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerListUrlRewritesByTargetPathsTest() throws ApiException {
        UrlmanagerListUrlRewritesByTargetPathsRequest body = null;
        UrlmanagerListUrlRewritesByTargetPathsRequest response = api.urlManagerListUrlRewritesByTargetPaths(body);
        // TODO: test validations
    }

    /**
     * List Url Rewrites By Target Paths
     *
     * Retrieve URL rewrite configurations based on target paths.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerListUrlRewritesByTargetPaths2Test() throws ApiException {
        UrlmanagerListUrlRewritesByTargetPathsRequest body = null;
        UrlmanagerListUrlRewritesByTargetPathsRequest response = api.urlManagerListUrlRewritesByTargetPaths2(body);
        // TODO: test validations
    }

    /**
     * Resolve Url Rewrite
     *
     * Resolve and retrieve the rewritten URL for a given input URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerResolveUrlRewriteTest() throws ApiException {
        UrlmanagerResolveUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerResolveUrlRewrite(body);
        // TODO: test validations
    }

    /**
     * Resolve Url Rewrite
     *
     * Resolve and retrieve the rewritten URL for a given input URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void urlManagerResolveUrlRewrite2Test() throws ApiException {
        UrlmanagerResolveUrlRewriteRequest body = null;
        UrlmanagerUrlRewrite response = api.urlManagerResolveUrlRewrite2(body);
        // TODO: test validations
    }

}
