/*
 * Url Manager Service
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets UrlRewriteRedirectType
 */
@JsonAdapter(UrlRewriteRedirectType.Adapter.class)
public enum UrlRewriteRedirectType {
  
  UNKNOWN("RedirectType_UNKNOWN"),
  
  OK("RedirectType_OK"),
  
  PERMANENT("RedirectType_PERMANENT"),
  
  TEMPORARY("RedirectType_TEMPORARY");

  private String value;

  UrlRewriteRedirectType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static UrlRewriteRedirectType fromValue(String value) {
    for (UrlRewriteRedirectType b : UrlRewriteRedirectType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<UrlRewriteRedirectType> {
    @Override
    public void write(final JsonWriter jsonWriter, final UrlRewriteRedirectType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public UrlRewriteRedirectType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return UrlRewriteRedirectType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    UrlRewriteRedirectType.fromValue(value);
  }
}

